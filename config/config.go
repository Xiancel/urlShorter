package config

import (
	"bufio"
	"fmt"
	"os"
	"strings"
	"time"
	"urlshort/history"
	"urlshort/shorter"
)

// —á–∏—Ç–∞—á—å —Å—Ç—Ä–æ–∫–∏
var reader *bufio.Reader = bufio.NewReader(os.Stdin)

// –ø—Ä–∏–π–º–∞—î —Ç–µ–∫—Å—Ç–æ–≤–µ –≤–≤–µ–¥–µ–Ω—è
func getStrInput(prompt string) string {
	fmt.Print(prompt)
	input, _ := reader.ReadString('\n')
	return strings.TrimSpace(input)
}

// —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ñ –ø—Ä–æ–≥—Ä–∞–º–º–∏
func Init() {
	fmt.Println("üîó URL Shortener")
	// –≥–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª
	for {
		// –∑–∞–ø—Ä–æ—Å—Å url —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
		fmt.Println("\n–í–≤–µ–¥—ñ—Ç—å URL –¥–ª—è —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è (–∞–±–æ 'exit' / 'history'): ")
		inputs := getStrInput("> ")

		// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–≤—ñ–¥ 'exit'
		if inputs == "exit" {
			fmt.Println("\nüò≠ Ceeeee-saaaaar...")
			time.Sleep(1 * time.Millisecond)
			fmt.Println("–°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—å, –≤–∞–º —Å–ø–æ–¥–æ–±–∞–≤—Å—è –Ω–∞—à URLshortener!")
			fmt.Println("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
			return
		}
		// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–≤—ñ–¥ 'history'
		if inputs == "history" {
			// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —ñ—Å—Ç–æ—Ä—ñ—ó
			if len(history.HistoryList) == 0 {
				fmt.Println("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
				continue
			} else {
				// –≤–∏–≤—ñ–¥ —ñ—Å—Ç–æ—Ä—ñ—ó —Å–∫–æ—Ä–æ—á—É–≤–∞–Ω–Ω—è
				fmt.Println("üóÇ MUDA MUDA MUDA... –∞ –Ω—ñ, —Ü–µ –ø—Ä–æ—Å—Ç–æ —ñ—Å—Ç–æ—Ä—ñ—è —Å–∫–æ—Ä–æ—á–µ–Ω—å.")
				time.Sleep(1 * time.Second)
				fmt.Println("\nüìú –Ü—Å—Ç–æ—Ä—ñ—è —Å–∫–æ—Ä–æ—á–µ–Ω—å: ")
				for i, h := range history.HistoryList {
					fmt.Printf("%d.\nüîó %s\n‚≠ê %s\n", i+1, h.Original, h.Short)
				}
				continue
			}
		}
		fmt.Println("Oh? You‚Äôre approaching the API?")

		time.Sleep(1 * time.Second)
		fmt.Println("\nüì° –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–ø–∏—Ç –¥–æ TinyURL API...")

		// –ø–µ—Ä–µ–¥–∞–≤–∞–Ω–Ω—è url –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó shortingurl
		res, err := shorter.ShortingUrl(inputs)
		// –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
		if err != nil {
			fmt.Println("\nYare Yare Daze... –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞!\n")

			time.Sleep(1 * time.Second)
			if strings.HasPrefix(err.Error(), "api: ") {
				fmt.Println("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ TinyURL:", strings.TrimPrefix(err.Error(), "api: "))
			} else if strings.HasPrefix(err.Error(), "network: ") {
				fmt.Println("‚ùå –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞:", strings.TrimPrefix(err.Error(), "network: "))
			} else {
				fmt.Println("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: ", err)
			}
			continue
		}

		// –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
		history.HistoryList = append(history.HistoryList, history.UrlHistory{Original: inputs, Short: res})

		// –≤–∏–≤—ñ–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ —É—Å–ø–∏—à–Ω—É —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è

		fmt.Println("\nüí• ORA ORA ORA!")

		time.Sleep(1 * time.Second)

		fmt.Println("üí• OORAAA")
		fmt.Println("\n‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å–∫–æ—Ä–æ—á–µ–Ω–æ!")
		fmt.Println("üîó –û—Ä–∏–≥—ñ–Ω–∞–ª: ", inputs)
		fmt.Println("‚≠ê –ö–æ—Ä–æ—Ç–∫–∏–π: ", res)
	}
}
